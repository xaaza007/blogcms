{"version":3,"file":"parser-plugins.js","sources":["../lib/parser-plugins.js"],"sourcesContent":["/* global DOMParser, window */\n\n/**\n * Copied from:\n * https://github.com/TryGhost/Ghost-Admin/blob/1f3d77d7230dd47a7eb5f38b90dfa510b2a16801/lib/koenig-editor/addon/options/parser-plugins.js\n * Which makes use of:\n * https://github.com/TryGhost/Ghost-Admin/blob/1f3d77d7230dd47a7eb5f38b90dfa510b2a16801/lib/koenig-editor/addon/helpers/clean-basic-html.js\n *\n * These functions are used to proces nodes during parsing from DOM -> mobiledoc\n */\n\nimport cleanBasicHtml from '@tryghost/kg-clean-basic-html';\n\nexport function createParserPlugins(_options = {}) {\n    const defaults = {};\n    const options = Object.assign({}, defaults, _options);\n\n    if (!options.createDocument) {\n        const Parser = (typeof DOMParser !== 'undefined' && DOMParser) || (typeof window !== 'undefined' && window.DOMParser);\n\n        if (!Parser) {\n            throw new Error('createParserPlugins() must be passed a `createDocument` function as an option when used in a non-browser environment');\n        }\n\n        options.createDocument = function (html) {\n            const parser = new Parser();\n            return parser.parseFromString(html, 'text/html');\n        };\n    }\n\n    // HELPERS -----------------------------------------------------------------\n\n    function _readFigCaptionFromNode(node, payload) {\n        let figcaption = node.querySelector('figcaption');\n\n        if (figcaption) {\n            let cleanHtml = cleanBasicHtml(figcaption.innerHTML, options);\n            payload.caption = payload.caption ? `${payload.caption} / ${cleanHtml}` : cleanHtml;\n            figcaption.remove(); // cleanup this processed element\n        }\n    }\n\n    function _readGalleryImageFromNode(node, imgNum) {\n        let fileName = node.src.match(/[^/]*$/)[0];\n        let image = {\n            fileName,\n            row: Math.floor(imgNum / 3),\n            src: node.src\n        };\n\n        if (node.width) {\n            image.width = node.width;\n        } else if (node.dataset && node.dataset.width) {\n            image.width = parseInt(node.dataset.width, 10);\n        }\n\n        if (node.height) {\n            image.height = node.height;\n        } else if (node.dataset && node.dataset.height) {\n            image.height = parseInt(node.dataset.height, 10);\n        }\n\n        if (node.alt) {\n            image.alt = node.alt;\n        }\n\n        if (node.title) {\n            image.title = node.title;\n        }\n\n        return image;\n    }\n\n    // PLUGINS -----------------------------------------------------------------\n\n    function mixtapeEmbed(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'DIV' || !node.className.match(/graf--mixtapeEmbed/)) {\n            return;\n        }\n\n        // Grab the relevant elements - Anchor wraps most of the data\n        let anchorElement = node.querySelector('.markup--mixtapeEmbed-anchor');\n        let titleElement = anchorElement.querySelector('.markup--mixtapeEmbed-strong');\n        let descElement = anchorElement.querySelector('.markup--mixtapeEmbed-em');\n        // Image is a top level field inside it's own a tag\n        let imgElement = node.querySelector('.mixtapeImage');\n\n        // Grab individual values from the elements\n        let url = anchorElement.href;\n        let title = '';\n        let description = '';\n\n        if (titleElement && titleElement.innerHTML) {\n            title = cleanBasicHtml(titleElement.innerHTML, options);\n            // Cleanup anchor so we can see what's left now that we've processed title\n            anchorElement.removeChild(titleElement);\n        }\n\n        if (descElement && descElement.innerHTML) {\n            description = cleanBasicHtml(descElement.innerHTML, options);\n            // Cleanup anchor so we can see what's left now that we've processed description\n            anchorElement.removeChild(descElement);\n        }\n\n        // // Format our preferred structure.\n        let metadata = {\n            url,\n            title,\n            description\n        };\n\n        // Publisher is the remaining text in the anchor, once title & desc are removed\n        let publisher = cleanBasicHtml(anchorElement.innerHTML, options);\n        if (publisher) {\n            metadata.publisher = publisher;\n        }\n\n        // Image is optional,\n        // The element usually still exists with an additional has.mixtapeImage--empty class and has no background image\n        if (imgElement && imgElement.style['background-image']) {\n            metadata.thumbnail = imgElement.style['background-image'].match(/url\\(([^)]*?)\\)/)[1];\n        }\n\n        let payload = {url, metadata};\n        let cardSection = builder.createCardSection('bookmark', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    // https://github.com/TryGhost/Koenig/issues/1\n    // allows arbitrary HTML blocks wrapped in our card comments to be extracted\n    // into a HTML card rather than being put through the normal parse+plugins\n    function kgHtmlCardToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 8 || node.nodeValue !== 'kg-card-begin: html') {\n            return;\n        }\n\n        let html = [];\n\n        function isHtmlEndComment(node) {\n            return node && node.nodeType === 8 && node.nodeValue === 'kg-card-end: html';\n        }\n\n        let nextNode = node.nextSibling;\n        while (nextNode && !isHtmlEndComment(nextNode)) {\n            let currentNode = nextNode;\n            html.push(currentNode.outerHTML);\n            nextNode = currentNode.nextSibling;\n            // remove nodes as we go so that they don't go through the parser\n            currentNode.remove();\n        }\n\n        let payload = {html: html.join('\\n').trim()};\n        let cardSection = builder.createCardSection('html', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    // mobiledoc by default ignores <BR> tags but we have a custom SoftReturn atom\n    function brToSoftBreakAtom(node, builder, {addMarkerable, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'BR') {\n            return;\n        }\n\n        let softReturn = builder.createAtom('soft-return');\n        addMarkerable(softReturn);\n\n        nodeFinished();\n    }\n\n    // leading newlines in text nodes will add a space to the beginning of the text\n    // which doesn't render correctly if we're replacing <br> with SoftReturn atoms\n    // after parsing text as markdown to html\n    function removeLeadingNewline(node) {\n        if (node.nodeType !== 3 || node.nodeName !== '#text') {\n            return;\n        }\n\n        node.nodeValue = node.nodeValue.replace(/^\\n/, '');\n    }\n\n    const kgGalleryCardToCard = (node, builder, {addSection, nodeFinished}) => {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        if (!node.className.match(/kg-gallery-card/)) {\n            return;\n        }\n\n        let payload = {};\n        let imgs = Array.from(node.querySelectorAll('img'));\n\n        // Process nodes into the payload\n        payload.images = imgs.map(_readGalleryImageFromNode);\n\n        _readFigCaptionFromNode(node, payload);\n\n        let cardSection = builder.createCardSection('gallery', payload);\n        addSection(cardSection);\n        nodeFinished();\n    };\n\n    function grafGalleryToCard(node, builder, {addSection, nodeFinished}) {\n        function isGrafGallery(node) {\n            return node.nodeType === 1 && node.tagName === 'DIV' && node.dataset && node.dataset.paragraphCount && node.querySelectorAll('img').length > 0;\n        }\n\n        if (!isGrafGallery(node)) {\n            return;\n        }\n\n        let payload = {};\n\n        // These galleries exist in multiple divs. Read the images and cation from the first one...\n        let imgs = Array.from(node.querySelectorAll('img'));\n        _readFigCaptionFromNode(node, payload);\n\n        // ...and then iterate over any remaining divs until we run out of matches\n        let nextNode = node.nextSibling;\n        while (nextNode && isGrafGallery(nextNode)) {\n            let currentNode = nextNode;\n            imgs = imgs.concat(Array.from(currentNode.querySelectorAll('img')));\n            _readFigCaptionFromNode(currentNode, payload);\n            nextNode = currentNode.nextSibling;\n            // remove nodes as we go so that they don't go through the parser\n            currentNode.remove();\n        }\n\n        // Process nodes into the payload\n        payload.images = imgs.map(_readGalleryImageFromNode);\n\n        let cardSection = builder.createCardSection('gallery', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureToImageCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let img = node.querySelector('img');\n        let kgClass = node.className.match(/kg-width-(wide|full)/);\n        let grafClass = node.className.match(/graf--layout(FillWidth|OutsetCenter)/);\n\n        if (!img) {\n            return;\n        }\n\n        let payload = {\n            src: img.src,\n            alt: img.alt,\n            title: img.title\n        };\n\n        if (kgClass) {\n            payload.cardWidth = kgClass[1];\n        } else if (grafClass) {\n            payload.cardWidth = grafClass[1] === 'FillWidth' ? 'full' : 'wide';\n        }\n\n        _readFigCaptionFromNode(node, payload);\n\n        let cardSection = builder.createCardSection('image', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function imgToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'IMG') {\n            return;\n        }\n\n        let payload = {\n            src: node.src,\n            alt: node.alt,\n            title: node.title\n        };\n\n        let cardSection = builder.createCardSection('image', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function hrToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'HR') {\n            return;\n        }\n\n        let cardSection = builder.createCardSection('hr');\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureIframeToEmbedCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let iframe = node.querySelector('iframe');\n\n        if (!iframe) {\n            return;\n        }\n\n        let src = iframe.src;\n\n        // If we don't have a src, or it's not an absolute URL, we can't handle this\n        if (!src || !src.match(/^https?:\\/\\//i)) {\n            return;\n        }\n\n        let payload = {\n            url: src\n        };\n\n        _readFigCaptionFromNode(node, payload);\n\n        payload.html = iframe.outerHTML;\n\n        let cardSection = builder.createCardSection('embed', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureBlockquoteToEmbedCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let blockquote = node.querySelector('blockquote');\n        let link = node.querySelector('a');\n\n        if (!blockquote || !link) {\n            return;\n        }\n\n        let url = link.href;\n\n        // If we don't have a url, or it's not an absolute URL, we can't handle this\n        if (!url || !url.match(/^https?:\\/\\//i)) {\n            return;\n        }\n\n        let payload = {\n            url: url\n        };\n\n        _readFigCaptionFromNode(node, payload);\n\n        payload.html = node.innerHTML;\n\n        let cardSection = builder.createCardSection('embed', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureToCodeCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let pre = node.querySelector('pre');\n\n        // If this figure doesn't have a pre tag in it\n        if (!pre) {\n            return;\n        }\n\n        let code = pre.querySelector('code');\n        let figcaption = node.querySelector('figcaption');\n\n        // if there's no caption the preCodeToCard plugin will pick it up instead\n        if (!code || !figcaption) {\n            return;\n        }\n\n        let payload = {\n            code: code.textContent\n        };\n\n        _readFigCaptionFromNode(node, payload);\n\n        let preClass = pre.getAttribute('class') || '';\n        let codeClass = code.getAttribute('class') || '';\n        let langRegex = /lang(?:uage)?-(.*?)(?:\\s|$)/i;\n        let languageMatches = preClass.match(langRegex) || codeClass.match(langRegex);\n        if (languageMatches) {\n            payload.language = languageMatches[1].toLowerCase();\n        }\n\n        let cardSection = builder.createCardSection('code', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function preCodeToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'PRE') {\n            return;\n        }\n\n        let [codeElement] = node.children;\n\n        if (codeElement && codeElement.tagName === 'CODE') {\n            let payload = {code: codeElement.textContent};\n\n            let preClass = node.getAttribute('class') || '';\n            let codeClass = codeElement.getAttribute('class') || '';\n            let langRegex = /lang(?:uage)?-(.*?)(?:\\s|$)/i;\n            let languageMatches = preClass.match(langRegex) || codeClass.match(langRegex);\n            if (languageMatches) {\n                payload.language = languageMatches[1].toLowerCase();\n            }\n\n            let cardSection = builder.createCardSection('code', payload);\n            addSection(cardSection);\n            nodeFinished();\n        }\n    }\n\n    function figureScriptToHtmlCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let script = node.querySelector('script');\n\n        if (!script || !script.src.match(/^https:\\/\\/gist\\.github\\.com/)) {\n            return;\n        }\n\n        let payload = {html: script.outerHTML};\n        let cardSection = builder.createCardSection('html', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    return [\n        mixtapeEmbed,\n        kgHtmlCardToCard,\n        brToSoftBreakAtom,\n        removeLeadingNewline,\n        kgGalleryCardToCard,\n        figureBlockquoteToEmbedCard, // I think these can contain images\n        grafGalleryToCard,\n        figureToImageCard,\n        imgToCard,\n        hrToCard,\n        figureToCodeCard,\n        preCodeToCard,\n        figureIframeToEmbedCard,\n        figureScriptToHtmlCard\n    ];\n}\n"],"names":["createParserPlugins","_options","defaults","options","Object","assign","createDocument","Parser","DOMParser","window","Error","html","parser","parseFromString","_readFigCaptionFromNode","node","payload","figcaption","querySelector","cleanHtml","cleanBasicHtml","innerHTML","caption","remove","_readGalleryImageFromNode","imgNum","fileName","src","match","image","row","Math","floor","width","dataset","parseInt","height","alt","title","mixtapeEmbed","builder","addSection","nodeFinished","nodeType","tagName","className","anchorElement","titleElement","descElement","imgElement","url","href","description","removeChild","metadata","publisher","style","thumbnail","cardSection","createCardSection","kgHtmlCardToCard","nodeValue","isHtmlEndComment","nextNode","nextSibling","currentNode","push","outerHTML","join","trim","brToSoftBreakAtom","addMarkerable","softReturn","createAtom","removeLeadingNewline","nodeName","replace","kgGalleryCardToCard","imgs","Array","from","querySelectorAll","images","map","grafGalleryToCard","isGrafGallery","paragraphCount","length","concat","figureToImageCard","img","kgClass","grafClass","cardWidth","imgToCard","hrToCard","figureIframeToEmbedCard","iframe","figureBlockquoteToEmbedCard","blockquote","link","figureToCodeCard","pre","code","textContent","preClass","getAttribute","codeClass","langRegex","languageMatches","language","toLowerCase","preCodeToCard","codeElement","children","figureScriptToHtmlCard","script"],"mappings":"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"}